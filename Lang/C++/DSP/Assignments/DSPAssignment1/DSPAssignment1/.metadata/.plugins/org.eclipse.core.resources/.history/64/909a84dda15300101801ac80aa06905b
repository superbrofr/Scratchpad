/*
 * HexDump.cpp
 *
 *  Created on: 20 Mar 2011
 *      Author: charlie
 */

#include "HexDump.h"
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string.h>

using namespace std;

HexDump::~HexDump(){}

//tries to open the specified file, and the output file
//returns true if opening worked, otherwise returns false
bool HexDump::open(char* aFileName)
{
	char temp[100];
	strcpy(temp, aFileName);

	fInput.open(aFileName, ios::in);
	fOutput.open(strcat(temp, ".txt"), ios::out);

	if(fInput.is_open() && fOutput.is_open()){
		return true;
	}
	else{
		return false;
	}
}

//closes the input and output files
void HexDump::close()
{
	fInput.close();
	fOutput.close();
}

//reads the file and outputs in the specified format
void HexDump::run()
{
	int byteCount = 0;
	int whiteSpace = 50; //initialised to 50, the number of whitespace characters needed for an empty line
	int nextChar;

	while(fInput.good()){
		if(byteCount == 0){
			fOutput << hex << uppercase << setfill('0') << setw(8) << fInput.tellg() << ": "; //display file pointer position
		}

		//check if next character will be the end of the file
		if(fInput.peek() == -1){ //end of file, calculate whitespace needed and display characters for last line
			whiteSpace -= (byteCount * 3); //each character already displayed reduces need for whitespace by 3
			if(byteCount > 8){
				whiteSpace -= 2; //if more than 8 characters, pipe separator will be displaying, so reduces need for whitespace by additional 2
			}
			//display required whitespace
			for(int i = 0; i < whiteSpace; i++){
				fOutput << " ";
			}
			//display characters
			fInput.
		}
		else{ //not end of file, read nex character and display as normal
			int nextChar = fInput.get(); //get the next character from the file
			fOutput << hex << uppercase << setfill('0') << setw(2) << nextChar << " ";
			++byteCount;
			if(byteCount == 8){
			fOutput << "| ";
			}
			else if (byteCount == 16){
			fInput.seekg(-16, ios::cur); //take pointer back 16 characters

				//print out same characters, in their graph form
				for(int i = 0; i < 16; i++){
					int temp = fInput.get();
					if(isgraph(temp)){
					fOutput << (char)temp;
					}
					else{
					fOutput << ".";
				}
				}
				fOutput << "\n";
				byteCount = 0; //reset byte count
			}
		}
	}
}
