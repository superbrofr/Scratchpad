/*
 * NodeIterator.h
 *
 *  Created on: 8 May 2011
 *      Author: charlie
 */

#ifndef NODEITERATOR_H_
#define NODEITERATOR_H_
template<class DataType>
class NodeIterator
{
private:
	enum IteratorStates { BEFORE, DATA , END };

	IteratorStates fState;

	typedef DoubleLinkedNode<DataType> Node;

	const Node* fLeftmost;
	const Node* fRightmost;
	const Node* fCurrent;

public:
	typedef NodeIterator<DataType> Iterator;

	NodeIterator(const Node& aList)
	{
		//Set leftmost
		fLeftmost = &aList;
		while (&fLeftmost->getPrevious() != &Node::NIL)
			fLeftmost = &fLeftmost->getPrevious();

		//Set rightmsot
		fRightmost = &aList;
		while (&fRightmost->getNext() != &Node::NIL)
			fRightmost = &fRightmost->getNext();

	    // start iterator at leftmost element
	    fCurrent = fLeftmost;

	    // set state
	    if(fCurrent == &Node::NIL)
	    	fState = END;
	    else
	    	fState = DATA;
	  }

	  const DataType& operator*() const
	  {
		  return fCurrent->getValue();
	  }

	  Iterator& operator++()
	  {
		  if(fState == BEFORE){
			  fCurrent = fLeftmost;
			  if(fCurrent == &Node::NIL)
				  fState = END;
			  else
				  fState = DATA;
		  }
		  else if(fState = DATA){
			  fCurrent = &fCurrent->getNext();
			  if(fCurrent == &Node::NIL)
				  fState = END;
		  }
	    return *this;
	  }

	  Iterator operator++(int)
	  {
		  Iterator Result = *this;

		  ++(*this);

		  return Result;
	  }

	  Iterator& operator--()
	  {
		  switch (fState)
		  {
	      case END:
	    	  fCurrent = fRightmost;
	    	  if (fCurrent == &Node::NIL)
				  fState = BEFORE;
			  else
				  fState = DATA;
	    	  break;
	      case DATA:
	    	  fCurrent = &fCurrent->getPrevious();
	    	  if (fCurrent == &Node::NIL)
	    		  fState = BEFORE;
	      default: ;
	    }

	    return *this;
	  }

	  NodeIterator operator--(int)
	  {
		  Iterator Result = *this;

		  --(*this);

		  return Result;
	  }

	  bool operator==(const Iterator& aOtherIter) const
	  {
		  return (fCurrent == aOtherIter.fCurrent) &&
		         (fLeftmost == aOtherIter.fLeftmost) &&
		         (fRightmost == aOtherIter.fRightmost) &&
	             (fState == aOtherIter.fState);
	  }

	  bool operator!=(const Iterator& aOtherIter) const
	  {
		  return !(*this == aOtherIter);
	  }

	  Iterator begin()
	  {
		  Iterator returnIter = *this;
		  returnIter.fCurrent = &Node::NIL;
		  returnIter.fState = BEFORE;

		  return returnIter;
	  }

	  Iterator end()
	  {
		  Iterator returnIter = *this;
		  returnIter.fCurrent = &Node::NIL;
		  returnIter.fState = END;

		  return returnIter;
	  }
};

#endif /* NODEITERATOR_H_ */
