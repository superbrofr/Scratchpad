/*
 * DoubleLinkedNode.h
 *
 *  Created on: May 11, 2011
 *      Author: Charlotte
 */

#ifndef DOUBLELINKEDNODE_H_
#define DOUBLELINKEDNODE_H_

template<class DataType>
class DoubleLinkedNode
{
public:
	typedef DoubleLinkedNode<DataType> Node;

private:
	const DataType* fValue;
	Node* fNext;
	Node* fPrevious;

	DoubleLinkedNode(): fValue((const DataType*)0)
	{
		fNext = (Node*)0;
		fPrevious = (Node*)0;
	}

public:
	static Node NIL;

	DoubleLinkedNode(const DataType& aValue)
	{
		fValue = &aValue;
		fNext = &NIL;
		fPrevious = &NIL;
	}

	//Insert the given node after this node
	void insertNode(Node& aNode)
	{
		// if there is a next element, then link it in
		if ( fNext != &NIL )
		{
			aNode.fNext = fNext;
			fNext->fPrevious = &aNode;
		}

		fNext = &aNode;

		// set this aNode's fPrevious
		aNode.fPrevious = this;
	}

	//Insert the given node before this node
	void prependNode(Node& aNode)
	{
		if(fPrevious != &NIL){
			this->fPrevious->fNext = &aNode;
			aNode.fPrevious = this->fPrevious;
		}
		this->fPrevious = &aNode;
		aNode.fNext = this;
	}

	void dropNode()
	{
		fPrevious->fNext = fNext;
		fNext->fPrevious = fPrevious;
	}

	const DataType& getValue() const
	{
		return *fValue;
	}

	Node& getNext() const
	{
		return *fNext;
	}

	Node& getPrevious() const
	{
		return *fPrevious;
	}
};
template<class DataType>
DoubleLinkedNode<DataType> DoubleLinkedNode<DataType>::NIL;

#endif /* DOUBLELINKEDNODE_H_ */
