/*
 * List.h
 *
 *  Created on: May 11, 2011
 *      Author: Charlotte
 */

#ifndef LIST_H_
#define LIST_H_

#include "DoubleLinkedNode.h"
#include "NodeIterator.h"
#include <stdexcept>

template<class T>
class List
{
private:
	typedef DoubleLinkedNode<T> Value;
	typedef DoubleLinkedNode<T>* ListImpl;

	ListImpl fTop; //leftmost element
	ListImpl fLast; //rightmost element
	int fCount; //number of nodes

public:
	typedef NodeIterator<T> ListIterator;

	List()//list constructor
	{
		fTop = &Value::NIL;
		fLast = &Value::NIL;
		fCount = 0;
	}

	List(const List& aOtherList) //list copy constructor
	{
		fTop = &Value::NIL;
		fLast = &Value::NIL;
		for(ListIterator iter = aOtherList.begin(); iter != aOtherList.end(); iter++)
			add(*iter);
	}

	~List() //list deconstructor
	{
		while(fTop != &Value::NIL)
			dropFirst();
	}

	List& operator=(const List& aOtherList) //list assignment operator
	{
		//delete old nodes
		while(fTop != &Value::NIL)
			dropFirst();
		//get new nodes
		for(ListIterator iter = aOtherList.begin(); iter != aOtherList.end(); iter++)
			add(*iter);

		return *this;
	}

	bool isEmpty() const //empty list predicate
	{
		if(fCount == 0)
			return true;
		else
			return false;
	}

	int size() const //get number of nodes
	{
		return fCount;
	}

	void add(const T& aElement) //add element at end
	{
		ListImpl newNode = new Value(aElement);
		if(fCount == 0){
			fTop = newNode;
			fLast = newNode;
		}
		else{
			fLast->insertNode(*newNode);
			fLast = newNode;
		}
		fCount++;
	}

	void addFirst(const T& aElement)//add element at top
	{
		ListImpl newNode = new Value(aElement);
		if(fCount == 0){
			fTop = newNode;
			fLast = newNode;
		}
		else{
			fTop->prependNode(*newNode);
			fTop = newNode;
		}
		fCount++;
	}

	bool drop(const T& aElement) //delete matching element
	{
		if(fCount > 0){
			fCount--;
			for(ListImpl curr = fTop; curr != fLast; curr = &curr->getNext()){
				if(curr->getValue() == aElement){
					curr->dropNode();
					delete curr;
					return true;
				}
			}
		}
		return false;
	}

	void dropFirst() //delete first node
	{
		if(fCount > 0){
			ListImpl temp = fTop;
			fTop = &fTop->getNext();
			temp->dropNode();
			delete temp;
			fCount--;
		}
	}

	void dropLast() //delete last node
	{
		if(fCount > 0){
			ListImpl temp = fLast;
			fLast = &fLast->getPrevious();
			temp->dropNode();
			delete temp;
			fCount--;
		}
	}

	const T& operator[](int aIndex) const //list indexer
	{
		ListImpl curr = fTop;
		if(aIndex >= size()){
			throw std::out_of_range("Out of range index!");
		}
		else{
			for(int i = 0; i < aIndex; i++)
				curr = &curr->getNext();
		}
		return curr->getValue();
	}

	ListIterator begin() const //list iterator
	{
		ListIterator returnIter(*fTop);
		returnIter = returnIter.begin();
		returnIter++;
		return returnIter;
	}

	ListIterator end() const //list iterator
	{
		ListIterator returnIter(*fLast);
		returnIter = returnIter.end();
		return returnIter;
	}
};

#endif /* LIST_H_ */
